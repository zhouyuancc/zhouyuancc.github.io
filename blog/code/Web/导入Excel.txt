
前台

<tr>

<td width="10%" align="right" valign="middle">
                                            请选择Excel文件&nbsp;&nbsp;</td>
<td width="50%" align="left" valign="middle" colspan="4">
<input id="MyFile" runat="server" cssclass="buttonStyle" name="MyFile" style="width: 85%; background-color: transparent" type="file" size="55"/>                                          
<asp:HyperLink ID="HyperLink1" runat="server"  NavigateUrl="../../AttachFile/jxgl/合同台账模板.xls" Target="_blank">下载模板</asp:HyperLink></td>
         <td width="25%" align="right" valign="middle" colspan="3">
                                            <asp:Button ID="btnDr" runat="server" CssClass="ButtonStyle" Text="导入" OnClick="btnDr_Click" />
                                            <asp:Button ID="btnExport" runat="server" CssClass="ButtonStyle" Text="导出" OnClick="btnExport_Click" />
                                            <asp:Button ID="btnquery" runat="server" CssClass="ButtonStyle" Text="查询" OnClick="btnquery_Click" /> 
                                        </td>
                                    </tr>



后台

 /// <summary>
        /// 是否是浮点数 可带正负号
        /// </summary>
        /// <param name="inputData">输入字符串</param>
        /// <returns></returns>
        public static bool IsDecimalSign(string inputData)
        {
            Regex RegDecimalSign = new Regex("^[-+]?\\d+(\\.\\d+)?$");
            Match m = RegDecimalSign.Match(inputData);
            return m.Success;
        }
        /// <summary>
        /// 是否是浮点数 可带正负号
        /// </summary>
        /// <param name="inputData">输入字符串</param>
        /// <returns></returns>
        public static bool IsDate(string inputData)
        {
            Regex RegDecimalSign = new Regex(@"^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$");
            Match m = RegDecimalSign.Match(inputData);
            return m.Success;
        }

        /// <summary>
        /// 导入
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDr_Click(object sender, EventArgs e)
        {
            ExcelImport();
            BindGrid(false);
        }
        /// <summary>
        /// 导入
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        ///
        private string ExcelImport()
        {
            //定义一个单元格

            Cells myCell = myexcel.ImportExcel("../AttachFile/jxgl/");

            if (myCell == null)
            {
                UserValue.Alert(this, "请选择Excel文件！");
                return "";
            }
            
            //材料编号
            String  Qdrq, Scbh, Htbh,Htje;
            int emp = 0;
            //定义Excel表中最大行数用来循环，确保不遗漏数据
            for (int i = 1; i < 10000; i++)
            {
                if (myCell[i, 0].StringValue == "" && myCell[i, 1].StringValue == "")
                {
                    break;
                }

              
                Qdrq = myCell[i, 1].StringValue;
                Scbh = myCell[i, 2].StringValue;
                Htbh = myCell[i, 3].StringValue;
               
                Htje = myCell[i, 8].StringValue;

            
             
                if (IsDate(Qdrq) == false)
                {
                    UserValue.Alert(this, "第" + (Convert.ToInt16(i) + 1) + "行，签订日期" + Qdrq + " 请正确书写（yyyy-MM-dd）！");
                    return "";
                }
                if (Scbh == "")
                {
                    UserValue.Alert(this, "第" + (Convert.ToInt16(i) + 1) + "行，生产编号为空，请检查！");
                    return "";
                }
                if (Htbh == "")
                {
                    UserValue.Alert(this, "第" + (Convert.ToInt16(i) + 1) + "行，合同编号为空，请检查！");
                    return "";
                }
              
                if (Htje == "")
                {
                    UserValue.Alert(this, "第" + (Convert.ToInt16(i) + 1) + "行，合同金额为空，请检查！");
                    return "";
                }
                if (IsDecimalSign(Htje) == false)
                {
                    UserValue.Alert(this, "第" + (Convert.ToInt16(i) + 1) + "行，合同金额应为数字，请检查！");
                    return "";
                }
                
                ////判断是否以在gd_zctz表中
                string strsql = "select count(*) from jx_httz where Htbh=@Htbh";
                SqlExec sqlexec = new SqlExec();
                SqlParameter[] sqlpa = {
                sqlexec.CreateInParam("@Htbh",SqlDbType.VarChar,20,Htbh)};
                string n = SqlExec.ExecuteScalar(strsql, CommandType.Text, sqlpa);
                if (Convert.ToInt32(n) != 0)
                {
                    UserValue.Alert(this, "第" + (Convert.ToInt16(i) + 1) + "行 " + Htbh + " 合同编号已经存在,请检查！");
                    return "";
                }

            }

            //定义Excel表中最大行数用来循环，确保不遗漏数据            
            for (int m = 1; m < 10000; m++)
            {
                if (myCell[m, 0].StringValue == "")
                {
                    break;
                }
                string str = "P_jx_httz_ADD";
                SqlExec sqlexec = new SqlExec();
                   SqlParameter[] para = new SqlParameter[]{
                sqlexec.CreateInParam("@Fl",SqlDbType.VarChar,50,myCell[m, 0].StringValue),
                sqlexec.CreateInParam("@Qdrq",SqlDbType.VarChar,50,myCell[m, 1].StringValue==""? null:myCell[m, 1].StringValue),
                sqlexec.CreateInParam("@Scbh ",SqlDbType.VarChar,50,myCell[m, 2].StringValue),
                sqlexec.CreateInParam("@Htbh ",SqlDbType.VarChar,50,myCell[m, 3].StringValue),
                sqlexec.CreateInParam("@Dhcj",SqlDbType.VarChar,20,myCell[m, 4].StringValue),
                sqlexec.CreateInParam("@Cpmc",SqlDbType.VarChar,20,myCell[m, 5].StringValue),
                sqlexec.CreateInParam("@Sl",SqlDbType.VarChar,20,myCell[m, 6].StringValue),
                sqlexec.CreateInParam("@Zl",SqlDbType.VarChar,20,myCell[m, 7].StringValue),
                sqlexec.CreateInParam("@Htje",SqlDbType.VarChar,20,myCell[m, 8].StringValue),

                sqlexec.CreateInParam("@CreateUser",SqlDbType.VarChar,30,Session["empcode"].ToString()),
                sqlexec.CreateInParam("@CreateDate",SqlDbType.VarChar,50,DateTime.Now.ToString("yyyy-MM-dd"))};
                SqlExec.ExecuteNonQuery(str, CommandType.StoredProcedure, para);
                emp = m;
            }

            UserValue.Alert(this, "成功导入" + emp + "条数据！");
            BindGrid(false);
            return "";
        }
        